#include"cmd.h"
#include"builtin.h"
#include <sys/types.h>
#include <sys/stat.h>
#include <dirent.h>
#include <string.h>
#include <pwd.h>
#include <grp.h>
#include <unistd.h>
#include <time.h>

#define LSO_LIST 1
#define LSO_ALL 2
#define LSO_FORMAT 4
#define LSO_RECURSIVE 8
#define LSO_BLOCK 16
#define MAX_ENTRY 2048	

int argProcessing(int argc, char *argv[], char**, int* );
int myls(char* target, int option);

int main(int argc, char *argv[]){
	char *target[MAX_TOKENS-1];
	int i;
	char *p;
	static int option=0;

	argProcessing(argc, argv, target, &option);

	if( target[0] == NULL ){
		myls(NULL, option);
	}
	else {
		for(i=0 ; target[i] != NULL ; ++i){
			myls(target[i], option);
		}
	}
	fputc('\n', stdout);


	return 0;
}



int myls(char *target, int option){
	DIR * pdir;
	int cnt=0;
	int i,j;
	struct dirent *dentry[MAX_ENTRY], *temp;
	struct stat buf;
	struct passwd *usr;
	struct group *grp;
	char time_buf[100];
	char path_buf[1024];
	struct tm *ctime;
	int rflag=1;
	
	if( target == NULL) 
		pdir = opendir(".");
	else
		pdir = opendir(target);

	while(dentry[cnt++] = readdir(pdir));
	cnt--;

	for( i=0; i< cnt; ++i){
		for( j=0; j<cnt; ++j){
			if( strcmp(dentry[i]->d_name,dentry[j]->d_name) < 0 ){
				temp = dentry[i];
				dentry[i] = dentry[j];
				dentry[j] = temp;
			}
		}
	}

	for(i=0; i< cnt; ++i){
		if( !(option & LSO_ALL) & (dentry[i]->d_name[0] == '.') )
			continue;

		if( target == NULL )
			strcpy( path_buf, ".");
		else 
			strcpy( path_buf, target );
		strcat( path_buf, "/");
		strcat( path_buf, dentry[i]->d_name);
		stat(path_buf, &buf);
		
		if( option & ( LSO_LIST | LSO_FORMAT | LSO_BLOCK ) );

		if( option & LSO_LIST ){
			switch( buf.st_mode & 0777000 ){
				case S_IFDIR:
					fputc('d' , stdout);
					break;
				case S_IFCHR:
					fputc('c' , stdout);
					break;
				case S_IFBLK:
					fputc('b' , stdout);
					break;
				case S_IFIFO:
					fputc('f' , stdout);
					break;
				case S_IFLNK:
					fputc('l' , stdout);
					break;
				case S_IFSOCK:
					fputc('s' , stdout);
					break;
				default:
					fputc('-', stdout);
					break;
			}
			if( buf.st_mode & 0000400 )
				fputc('r', stdout);
			else
				fputc('-', stdout);
			if( buf.st_mode & 0000200 )
				fputc('w', stdout);
			else
				fputc('-', stdout);
			if( buf.st_mode & 0000100 )
				fputc('x', stdout);
			else
				fputc('-', stdout);
			if( buf.st_mode & 0000040 )
				fputc('r', stdout);
			else
				fputc('-', stdout);
			if( buf.st_mode & 0000020 )
				fputc('w', stdout);
			else
				fputc('-', stdout);
			if( buf.st_mode & 0000010 )
				fputc('x', stdout);
			else
				fputc('-', stdout);
			if( buf.st_mode & 0000004 )
				fputc('r', stdout);
			else
				fputc('-', stdout);
			if( buf.st_mode & 0000002 )
				fputc('w', stdout);
			else
				fputc('-', stdout);
			if( buf.st_mode & 0000001 )
				fputc('x', stdout);
			else
				fputc('-', stdout);
			fputc(' ', stdout);
			fprintf(stdout, "%2d", buf.st_nlink);
			fputc(' ', stdout);
			fputs(getpwuid(buf.st_uid)->pw_name,  stdout);
			fputc(' ', stdout);
			fputs(getgrgid(buf.st_gid)->gr_name, stdout);
			fputc(' ', stdout);
			fprintf(stdout, "%6d", (int)buf.st_size);
			
			ctime= localtime(&buf.st_mtime);
			strftime(time_buf, sizeof(time_buf), "%Y-%m-%d %H:%M",ctime);
			fputc(' ', stdout);
			fputs( time_buf, stdout);
			fputc(' ', stdout);
		}

		if( option & LSO_RECURSIVE ){
			if(target == NULL ){
				strcpy(path_buf, "./");
			}
			else{
				strcpy(path_buf, target);
			}
			if( rflag ){
				fputs( path_buf, stdout);
				fputs(":\n", stdout);
				rflag = 0;
			}
		}

		fputs(dentry[i]->d_name, stdout);

		if( buf.st_mode & S_IFDIR ){	
			if(target == NULL ){
				strcat(path_buf, dentry[i]->d_name);
			}
			else{
				strcat(path_buf, "/");
				strcat(path_buf, dentry[i]->d_name);
			}
				fputc( '\n', stdout);
				fputc( '\n', stdout);
			myls(path_buf, option);
		}

		if( option & LSO_RECURSIVE ){
			if( option & LSO_FORMAT ){
				switch( buf.st_mode & 0777000 ){
					case S_IFDIR:
						fputc('/' , stdout);
						break;
					case S_IFIFO:
						fputc('|' , stdout);
						break;
					case S_IFLNK:
						fputc('@' , stdout);
						break;
					case S_IFSOCK:
						fputc('=' , stdout);
						break;
					case S_IFREG :
						fputc('*',stdout);
					default:

						break;
				}
			}
		}
		if( option & LSO_LIST )
			fputc('\n', stdout);
		else
			fputc('\t',stdout);
	}
	
	closedir(pdir);

}

int argProcessing(int argc, char *argv[], char **target, int* option ){
	int i, count=0;
	char *p;

	target[0]=NULL;
	for(i=1 ;i< argc ; ++i){
		p=argv[i];
		if( *p == '-' ){
			while( *(p++) != '\0' ){
				switch( *p ){
					case 'l':
						*option = *option | LSO_LIST;
						break;
					case 'a':	
						*option = *option | LSO_ALL;
						break;
					case 'F':	
						*option = *option | LSO_FORMAT;
						break;
					case 'R':	
						*option = *option | LSO_RECURSIVE;
						break;
					case 's':
						*option = *option | LSO_BLOCK;
							break;
					defualt:
						fputs("부적절한 옵션", stderr);
						fputc(*p, stderr);
						fputc('\n', stderr);
						break;
				}
			}
		}
		else
			target[count++]=argv[i];
	}
	
	target[count]=NULL;		
	return 0;

}
